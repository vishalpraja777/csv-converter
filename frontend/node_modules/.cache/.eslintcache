[{"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\index.js":"1","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\App.js":"2","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\Navbar.js":"3","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\Profile.js":"4","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\About.js":"5","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\UseMap.js":"6","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\Login.js":"7","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\HomePage.js":"8","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\Signup.js":"9","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\MainPage.js":"10","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\contact.js":"11","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\ConvertedFiles.js":"12","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\CreateJsonMap.js":"13","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\CreateXmlMap.js":"14","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\EditMapping.js":"15"},{"size":467,"mtime":1682083428264,"results":"16","hashOfConfig":"17"},{"size":1535,"mtime":1685378574706,"results":"18","hashOfConfig":"17"},{"size":1838,"mtime":1685378574709,"results":"19","hashOfConfig":"17"},{"size":979,"mtime":1685173755684,"results":"20","hashOfConfig":"17"},{"size":3022,"mtime":1685174020048,"results":"21","hashOfConfig":"17"},{"size":12466,"mtime":1685378574711,"results":"22","hashOfConfig":"17"},{"size":1943,"mtime":1685174020102,"results":"23","hashOfConfig":"17"},{"size":2746,"mtime":1685378574717,"results":"24","hashOfConfig":"17"},{"size":2689,"mtime":1685210906428,"results":"25","hashOfConfig":"17"},{"size":2406,"mtime":1685210906427,"results":"26","hashOfConfig":"17"},{"size":2800,"mtime":1685174020050,"results":"27","hashOfConfig":"17"},{"size":4223,"mtime":1685378973027,"results":"28","hashOfConfig":"17"},{"size":10919,"mtime":1685378574707,"results":"29","hashOfConfig":"17"},{"size":10571,"mtime":1685378574708,"results":"30","hashOfConfig":"17"},{"size":8821,"mtime":1685380124384,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"14avm52",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\index.js",[],[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\App.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\Navbar.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\Profile.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\About.js",["83","84"],[],"import React from \"react\"\r\nimport {useLocation, useNavigate} from \"react-router-dom\";  \r\nimport Navbar from \"./Navbar\";\r\nimport './About.css';\r\nimport bg from './images/bg.webp'\r\n\r\n\r\nconst About = () => {\r\n    return ( \r\n        <div >\r\n            <Navbar/>\r\n            <div className=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\" \r\n             style={{ backgroundImage: `url(${bg})` }}>\r\n\r\n            <div class=\"h-full  w-full text-6xl  text-gray-900 font-serif pt-10 px-20\">\r\n\r\n                <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n        <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p>\r\n        <h1 class=\"text-justify   text-3xl  text-black px-96 font-bold ml-96 py-8\"> About US </h1>\r\n         \r\n           <p class=\"text-justify bg-black  text-lg  text-white font-serif  ml-96  px-4 py-2   border-x-white\">Welcome to our CSV conversion tool,the perfect solution for those who need to convert CSV \r\n           files into XML or JSON formats quickly and efficiently. With our user-friendly interface, \r\n           you can convert your files in just a few clicks, saving you time and effort. We understand that converting\r\n            files can be a tedious process, but with our automated tool, you can streamline your workflow and focus on what\r\n             really matters. Whether you're a business owner or a data analyst, our tool will help you make the most out of your data.\r\n           </p>\r\n           <p class=\"text-justify bg-black  text-lg  text-white font-serif  ml-96  px-4 py-2  border-spacing-2 border-x-white\"> Our mapping feature ensures that your data is accurately transformed according to your specifications. You can choose between internal and external mapping to tailor the conversion to your specific needs. With internal mapping, you can create a custom map that maps your CSV data to the desired XML or JSON structure. This feature allows you to easily define the structure of the output file and ensure that your data is organized in a way that makes sense to you. With external mapping, you can use an existing mapping file to perform the conversion. This option is ideal for those who already have a mapping file that they want to use or those who prefer to use a pre-defined mapping structure.\r\n        </p>\r\n        <p class=\"text-justify bg-black  text-lg  text-white font-serif  ml-96  px-4 py-2  border-spacing-2 border-x-white\">\r\n            We understand that data security is a top priority for our users, and that's why we take it seriously. Our tool uses state-of-the-art encryption to ensure that your data is protected during the conversion structure of the database and the relationships between the tables and their attributes. It is a visual tool that helps developers and database administrators to better understand the database structure and to design new databases or modify existing ones.\r\n\r\n        </p>\r\n\r\n\r\n            </div>\r\n        </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default About;","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\UseMap.js",["85","86"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport './About.css';\r\nimport bg from './images/bg.webp'\r\n\r\n\r\nconst UseMap = () => {\r\n\r\n    const [csvFile, setCsvFile] = useState('')\r\n    const [csvFileName, setCsvFileName] = useState('')\r\n    const [fileUploaded, setFileUploaded] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [main, setMain] = useState(true)\r\n    const [mapData, setMapData] = useState()\r\n\r\n    const [optValue, setOptValue] = useState('')\r\n    const [optSelected, setOptSelected] = useState('')\r\n    const [mappingIdSelected, setMappingIdSelected] = useState()\r\n    const [mappingType, setMappingType] = useState('')\r\n    const [conversionName, setConversionName] = useState()\r\n\r\n    const [jsonFilePath, setJsonFilePath] = useState('')\r\n    const [xmlFilePath, setXmlFilePath] = useState('')\r\n\r\n    const [conversionData, setConversionData] = useState()\r\n    const [csvHeaders, setCsvHeaders] = useState()\r\n    const [csvHeadersItem, setCsvHeadersItem] = useState()\r\n    const [item, setItem] = useState()\r\n    const [uploadClick, setUploadClick] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('userid'))\r\n        fetch(`http://localhost:1337/api/getmapdata/${localStorage.getItem('userid')}`)\r\n            .then((response) => {\r\n                const reader = response.body.getReader();\r\n                // console.log(reader)\r\n                reader.read().then(({ done, value }) => {\r\n                    if (done) {\r\n                        console.log('end...')\r\n                        return;\r\n                    }\r\n                    const decoder = new TextDecoder();\r\n                    const strData = decoder.decode(value)\r\n                    const jsonData = JSON.parse(strData)\r\n                    // console.log(jsonData)\r\n                    setMapData(jsonData)\r\n                });\r\n            })\r\n\r\n        fetch(`http://localhost:1337/api/getconversiondata/${localStorage.getItem('userid')}`)\r\n            .then((response) => {\r\n                const reader = response.body.getReader();\r\n                // console.log(reader)\r\n                reader.read().then(({ done, value }) => {\r\n                    if (done) {\r\n                        console.log('end...')\r\n                        return;\r\n                    }\r\n                    const decoder = new TextDecoder();\r\n                    const strData = decoder.decode(value)\r\n                    const jsonData = JSON.parse(strData)\r\n                    // console.log(jsonData)\r\n                    setConversionData(jsonData)\r\n                });\r\n            })\r\n    }, [])\r\n\r\n    // const navigate = useNavigate();\r\n\r\n    // const formData = new FormData();\r\n\r\n    const handleDrageOverCsv = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleDropCsv = (event) => {\r\n        event.preventDefault();\r\n        setCsvFile(event.dataTransfer.files[0])\r\n        setCsvFileName(event.dataTransfer.files[0].name)\r\n        console.log(event.dataTransfer.files[0])\r\n    }\r\n\r\n\r\n    async function uplaodFile(event) {\r\n        event.preventDefault()\r\n\r\n        \r\n\r\n        if(!uploadClick) {\r\n            alert('Click On Upload')\r\n            return\r\n        }\r\n        setUploadClick(false)\r\n\r\n        // console.log(conversionName)\r\n        if (!conversionName) {\r\n            alert('Enter conversion name')\r\n            return\r\n        }\r\n\r\n\r\n\r\n        // const files = document.getElementById(\"files\");\r\n\r\n        // setCsvFile(files.files[0])\r\n        // setFileName(files.files[0].name)\r\n\r\n        // console.log(document.querySelector(\"#files\"))\r\n        // setCsvFile(event.target.files);\r\n        // setCsvFile(document.querySelector(\"#files\"));\r\n        // console.log(csvFile)\r\n\r\n        if (!csvFileName.endsWith(\".csv\") || !csvFileName) {\r\n            alert(\"Please Upload a valid CSV file\")\r\n            window.location.reload()\r\n            return\r\n        }\r\n\r\n        if (!optSelected) {\r\n            alert('Select Mapping')\r\n            setIsLoading(false)\r\n            setMain(true)\r\n            return\r\n        }\r\n\r\n        for (let item in conversionData) {\r\n            // console.log(conversionName + conversionData[item].conversionname)\r\n            if (conversionName.toLowerCase() === conversionData[item].conversionname) {\r\n                alert('Conversion name already present')\r\n                return\r\n            }\r\n        }\r\n\r\n        for (let i in csvHeadersItem) {\r\n            if (csvHeadersItem[i] !== csvHeaders[i]) {\r\n                console.log(csvHeadersItem[i])\r\n                console.log(csvHeaders[i])\r\n                alert(\"Headers not matching upload new file\")\r\n                return\r\n            }\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setMain(false);\r\n\r\n        const csvFormData = new FormData();\r\n        if (csvFile) {\r\n\r\n            csvFormData.append('name', 'csv_file');\r\n            // formData.append('file', files.files[0]);\r\n            csvFormData.append('file', csvFile);\r\n            csvFormData.append('mappingName', optValue);\r\n            csvFormData.append('mappingId', mappingIdSelected);\r\n            csvFormData.append('conversionName', conversionName);\r\n            csvFormData.append('userId', localStorage.getItem('userid'));\r\n            csvFormData.append('mappingData', JSON.stringify(optSelected));\r\n            csvFormData.append('mappingType', mappingType);\r\n\r\n\r\n\r\n            console.log(...csvFormData)\r\n\r\n            const csvResponse = await fetch('http://localhost:1337/api/uploadcsvtoconvert', {\r\n                method: 'POST',\r\n                // headers: {\r\n                //     'Content-Type': 'text/csv'\r\n                // },\r\n                body: csvFormData\r\n            })\r\n\r\n            // .then(res => console.log(res.json()))\r\n            // .catch(err => console.log(err));\r\n\r\n            const csvData = await csvResponse.json()\r\n\r\n            if (mappingType === 'json') {\r\n                console.log(csvData.jsonFilename)\r\n                setJsonFilePath(csvData.jsonFilename)\r\n            } else if (mappingType === 'xml') {\r\n                console.log(csvData.xmlFilename)\r\n                setXmlFilePath(csvData.xmlFilename)\r\n            }\r\n\r\n            console.log('OPT:' + optSelected)\r\n\r\n            setConversionName('')\r\n\r\n            if (csvData.status === 'ok') {\r\n                alert('File Uploaded')\r\n                setIsLoading(false)\r\n                setFileUploaded(true)\r\n                setUploadClick(false)\r\n            } else {\r\n                alert(\"File couldn't be uploaded\")\r\n                setIsLoading(false)\r\n                setMain(true)\r\n            }\r\n        }\r\n\r\n        else {\r\n            alert('Click Upload')\r\n        }\r\n\r\n    }\r\n\r\n    async function handleDownload(e) {\r\n        console.log(jsonFilePath)\r\n        e.preventDefault()\r\n        let filePath = ''\r\n        let type = ''\r\n        if (mappingType === 'json') {\r\n            filePath = jsonFilePath\r\n            type = 'json'\r\n        } else if (mappingType === 'xml') {\r\n            filePath = xmlFilePath\r\n            type = 'xml'\r\n        }\r\n\r\n        await fetch('http://localhost:1337/api/downloadfile', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                filename: filePath,\r\n                type: type\r\n            })\r\n        })\r\n            .then(res => {\r\n                res.blob().then(blob => {\r\n                    let url = window.URL.createObjectURL(blob);\r\n                    let a = document.createElement('a');\r\n                    a.href = url;\r\n                    a.download = 'output_' + filePath.slice(14);\r\n                    a.click();\r\n                });\r\n            });\r\n\r\n        alert('File Downloaded')\r\n\r\n        //  setFileUploaded(false)\r\n        //  setMain(true)\r\n        //  setCsvFile('')\r\n\r\n    }\r\n\r\n    const setMapValues = (e) => {\r\n        setOptValue(e.target.value)\r\n        console.log(e.target.value)\r\n        console.log(mapData)\r\n\r\n        mapData.map((item) => {\r\n            if (item.mappingname === e.target.value) {\r\n                setOptSelected(item.mappingdata)\r\n                setMappingIdSelected(item._id)\r\n                setItem(item)\r\n                setCsvHeadersItem(item.csvheaders)\r\n                setMappingType(item.mappingtype)\r\n                console.log(item.csvheaders)\r\n                console.log(item.mappingdata)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleUpload = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const csvFormData = new FormData();\r\n        if (csvFile) {\r\n            csvFormData.append('name', 'csv_file');\r\n            csvFormData.append('file', csvFile);\r\n\r\n\r\n            console.log(...csvFormData)\r\n\r\n            const csvResponse = await fetch('http://localhost:1337/api/uploadcsv', {\r\n                method: 'POST',\r\n                body: csvFormData\r\n            })\r\n            const csvData = await csvResponse.json()\r\n            console.log(csvData.csvHeaders)\r\n            setCsvHeaders(csvData.csvHeaders);\r\n            setUploadClick(true)\r\n        } else {\r\n            alert('Upload CSV File')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <div class=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\"\r\n                style={{ backgroundImage: `url(${bg})` }}>\r\n                <div class=\"h-full  w-full  pt-10 px-20\">\r\n\r\n                    <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n                    <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p>\r\n                    {main && <div>\r\n\r\n                        <form onSubmit={uplaodFile}>\r\n                            <div >\r\n                                <div class=\"mt-32 ml-96 bg-black text-white  w-3/5 px-24 py-4 pt-6 \"\r\n\r\n                                    onDragOver={handleDrageOverCsv}\r\n                                    onDrop={handleDropCsv}\r\n                                >\r\n                                    <h1 class=\"font-serif text-3xl py-6\">Drag or browse new csv file upload CSV file</h1>\r\n                                    {<input type=\"file\" name=\"file\" id=\"files\" onChange={(e) => { setCsvFile(e.target.files[0]); setCsvFileName(e.target.files[0].name) }} />}\r\n                                    {csvFile && <p class=\"px-\">File Name: {csvFileName}</p>}\r\n                                    <br />\r\n                                    <button className=\"btnU\" onClick={handleUpload}>Upload</button>\r\n                                </div>\r\n                                <div className=\"options\">\r\n                                    <select name=\"Mappings\" id=\"mappings\" value={optValue} onChange={setMapValues}>\r\n                                        <option selected>--Select--</option>\r\n                                        {\r\n                                            mapData?.map(item => <option>{item.mappingname}</option>)\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                                <input type=\"text\" onChange={(e) => { setConversionName(e.target.value) }} placeholder=\"Conversion Name\" className=\"input\" style={{ width: '25%', margin: 'auto' }} />\r\n                            </div>\r\n                            <input type=\"submit\" value=\"Convert\" class=\"bg-black text-lg font-semibold  text-white px-4 py-2 mt-4 rounded-2xl justify-end ml-96 mb-1\" />\r\n                        </form>\r\n                    </div>}\r\n                    {isLoading && <div>Loading...</div>}\r\n                    {fileUploaded && <div>\r\n                        <form onSubmit={handleDownload}>\r\n                            <button class=\"bg-black text-lg font-semibold  text-white px-4 py-2 rounded-2xl justify-end ml-96\" type=\"submit\" >Download</button>\r\n                        </form>\r\n                        <button class=\"bg-black text-lg font-semibold  text-white px-4 py-3 rounded-2xl justify-end ml-96\" onClick={() => { setMain(true); setFileUploaded(false); setCsvFile('') }} >Upload Another</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UseMap;","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\Login.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\HomePage.js",["87","88"],[],"import React from \"react\"\r\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport './main.css';\r\nimport bg from './images/bg.webp'\r\n\r\nconst HomePage = () => {\r\n\r\n    const userToken = localStorage.getItem('token')\r\n    console.log(\"Token: \" + userToken)\r\n\r\n    if (userToken) {\r\n        const userDecode = jwtDecode(userToken)\r\n        console.log(userDecode)\r\n    }\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleUseMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/usemap')\r\n    }\r\n\r\n    const handleCreateJsonMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/createjsonmap')\r\n    }\r\n\r\n    const handleCreateXmlMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/createxmlmap')\r\n    }\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            <Navbar />\r\n\r\n            <div className=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\"\r\n                style={{ backgroundImage: `url(${bg})` }}>\r\n                <div class=\"h-full  w-full text-6xl  text-gray-900 font-serif pt-20 px-20\">\r\n                    <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n                    <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p></div>\r\n\r\n                <div class=\"  ml-96 pt-4 px-24 flex w-3/4 align-middle\" >\r\n                    <div className=\"homeChild\">\r\n                        <h2 class=\" font-bold text-2xl italic\">Use Existing Mapping</h2>\r\n                        <button onClick={handleUseMap} className='btnU'>Upload Files</button>\r\n                        {/* <Link to='/usemap' className='btnU'>Upload Files</Link> */}\r\n                    </div>\r\n                    <div className=\"homeChild\">\r\n                        <h2 class=\" font-bold text-2xl italic\">Create New Mapping</h2>\r\n                        <div className=\"btnDiv\">\r\n                            <button onClick={handleCreateJsonMap} className='btnUD'>Create JSON Map</button>\r\n                            <button onClick={handleCreateXmlMap} className='btnUD'>Create XML Map</button>\r\n                            {/* <Link to='/createmap' className='btnU'>Upload Files</Link> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"py-2\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\Signup.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\MainPage.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\contact.js",["89","90"],[],"import React from \"react\"\r\nimport {useLocation, useNavigate} from \"react-router-dom\";  \r\nimport Navbar from \"./Navbar\";\r\nimport './About.css';\r\nimport bg from './images/bg.webp'\r\nimport img2 from './images/chat.png'\r\nimport img3 from './images/phone.jpg'\r\nimport img4 from './images/email.jpg'\r\nimport img5 from './images/address.png'\r\n\r\nconst contact = () => {\r\n    return ( \r\n        <div >\r\n            <Navbar/>\r\n            <div className=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\" \r\n             style={{ backgroundImage: `url(${bg})` }}>\r\n\r\n            <div class=\"h-full  w-full text-6xl  text-gray-900 font-serif pt-10 px-20\">\r\n\r\n                <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n        <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p>\r\n        <div class = \"flex ml-96 px-80 space-x-4 \">\r\n        <h1 class=\"text-justify   text-3xl  text-black font-bold py-4 \"> Contact  Us</h1>\r\n        <img src={img2}  class=\" h-12 \" alt=\"\" sizes=\"\" srcset=\"\"/>\r\n         </div>\r\n         <p class=\"text-justify   text-lg  text-black font-serif  ml-96  px-16   border-x-white\">\"Reach out to us and let's connect for all your inquiries, feedback, or collaborations!\"</p>\r\n         <div class = \"flex pt-28 space-x-24\"> \r\n           <h1 class=\"text-justify  text-2xl font-semibold bg-black  text-white font-serif  ml-96  px-16 py-4  flex border-x-white\">Phone\r\n        \r\n           <img src={img3}  class=\" h-12 rounded-full px-2.5\" alt=\"\" sizes=\"\" srcset=\"\"/></h1>\r\n           <h1 class=\"text-justify flex bg-black  text-2xl font-semibold  text-white font-serif  ml-96  px-16 py-4  border-spacing-2 border-x-white\"> Email\r\n           <img src={img4}  class=\" h-12 rounded-full px-2\" alt=\"\" sizes=\"\" srcset=\"\"/>\r\n        </h1>\r\n        <h1 class=\"text-justify bg-black flex text-2xl font-semibold  text-white font-serif  ml-96  px-24 py-4  border-spacing-2 border-x-white\"> Address\r\n        <img src={img5}  class=\" h-12 rounded-full px-1.5\" alt=\"\" sizes=\"\" srcset=\"\"/></h1>\r\n        </div>\r\n        <div class = \"flex space-x-24\"> \r\n           <h1 class=\"text-justify  text-lg bg-black  text-white font-serif  ml-96  px-14 py-4   border-x-white\">Ph:-7754362435\r\n        </h1>\r\n           <h1 class=\"text-justify flex bg-black  text-lg  text-white font-serif  ml-96  px-14 py-4  border-spacing-2 border-x-white\"> xyz@gmail.com\r\n        </h1>\r\n        <h1 class=\"text-justify bg-black text-lg  text-white font-serif  ml-96  px-6 py-4  border-spacing-2 border-x-white\"> Cambridge institute of technology\r\n        <p> Kr Puram </p>\r\n        <p > Bangalore -560036 </p> \r\n        </h1>\r\n        </div>\r\n        <div class= \"py-10\">\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default contact;","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\ConvertedFiles.js",["91"],[],"import { useEffect, useState } from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst ConvertedFiles = () => {\r\n\r\n    const [conversionData, setConversionData] = useState()\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('userid'))\r\n        fetch(`http://localhost:1337/api/getconversiondata/${localStorage.getItem('userid')}`)\r\n            .then((response) => {\r\n                const reader = response.body.getReader();\r\n                console.log(reader)\r\n                reader.read().then(({ done, value }) => {\r\n                    if (done) {\r\n                        console.log('end...')\r\n                        return;\r\n                    }\r\n                    const decoder = new TextDecoder();\r\n                    const strData = decoder.decode(value)\r\n                    const jsonData = JSON.parse(strData)\r\n                    console.log(jsonData)\r\n                    setConversionData(jsonData)\r\n                });\r\n            })\r\n        console.log(conversionData)\r\n    }, [])\r\n\r\n    const handleDownload = async (e, filename, type) => {\r\n        e.preventDefault()\r\n\r\n        const response = await fetch('http://localhost:1337/api/downloadfile', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                filename: filename,\r\n                type: type\r\n            })\r\n        })\r\n\r\n        // const data = await response.json();\r\n\r\n        if ( type === 'json') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download ='output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        } else if( type === 'csv') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        } else if( type === 'xml') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        }\r\n        else{\r\n            alert('File not downloaded')\r\n        }\r\n\r\n        // if (data.status === 'ok') {\r\n        //     console.log(data.status)\r\n        // } else {\r\n        //     console.log(data.error)\r\n        // }\r\n\r\n        // console.log(data)\r\n        console.log(filename)\r\n        console.log(type)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <div>\r\n                <table>\r\n                    <tr>\r\n                        <th>Conversion Name</th>\r\n                        <th>Mapping Name</th>\r\n                        <th>Mapping Type</th>\r\n                        <th>CSV File</th>\r\n                        <th>JSON/XML File</th>\r\n                    </tr>\r\n                    {\r\n                        conversionData?.map((item) =>\r\n                            <tr>\r\n                                <td>{item.conversionname}</td>\r\n                                <td>{item.mappingname}</td>\r\n                                <td>{item.mappingtype.toUpperCase()}</td>\r\n                                <td>{item.csvfile.slice(14)} <button onClick={(e) => handleDownload(e, item.csvfile, 'csv')}>Download</button></td>\r\n                                {item.jsonfile && <td>{item.jsonfile.slice(14)} <button onClick={(e) => handleDownload(e, item.jsonfile, 'json')}>Download</button></td> }\r\n                                {item.xmlfile && <td>{item.xmlfile.slice(14)} <button onClick={(e) => handleDownload(e, item.xmlfile, 'xml')}>Download</button></td> }\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConvertedFiles;","D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\CreateJsonMap.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\components\\CreateXmlMap.js",[],[],"D:\\User\\D_Documents\\WebProjects\\CSVConvertor\\frontend\\src\\pages\\EditMapping.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],[],{"ruleId":"109","severity":1,"message":"110","line":2,"column":9,"nodeType":"111","messageId":"112","endLine":2,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":2,"column":22,"nodeType":"111","messageId":"112","endLine":2,"endColumn":33},{"ruleId":"109","severity":1,"message":"114","line":29,"column":12,"nodeType":"111","messageId":"112","endLine":29,"endColumn":16},{"ruleId":"115","severity":1,"message":"116","line":253,"column":28,"nodeType":"117","messageId":"118","endLine":253,"endColumn":30},{"ruleId":"109","severity":1,"message":"110","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":21},{"ruleId":"109","severity":1,"message":"119","line":2,"column":36,"nodeType":"111","messageId":"112","endLine":2,"endColumn":40},{"ruleId":"109","severity":1,"message":"110","line":2,"column":9,"nodeType":"111","messageId":"112","endLine":2,"endColumn":20},{"ruleId":"109","severity":1,"message":"113","line":2,"column":22,"nodeType":"111","messageId":"112","endLine":2,"endColumn":33},{"ruleId":"120","severity":1,"message":"121","line":27,"column":8,"nodeType":"122","endLine":27,"endColumn":10,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":13,"column":22,"nodeType":"111","messageId":"112","endLine":13,"endColumn":33},{"ruleId":"109","severity":1,"message":"125","line":14,"column":12,"nodeType":"111","messageId":"112","endLine":14,"endColumn":19},{"ruleId":"109","severity":1,"message":"126","line":14,"column":21,"nodeType":"111","messageId":"112","endLine":14,"endColumn":31},{"ruleId":"109","severity":1,"message":"127","line":16,"column":12,"nodeType":"111","messageId":"112","endLine":16,"endColumn":19},{"ruleId":"109","severity":1,"message":"128","line":17,"column":12,"nodeType":"111","messageId":"112","endLine":17,"endColumn":23},{"ruleId":"109","severity":1,"message":"129","line":20,"column":12,"nodeType":"111","messageId":"112","endLine":20,"endColumn":20},{"ruleId":"109","severity":1,"message":"130","line":21,"column":12,"nodeType":"111","messageId":"112","endLine":21,"endColumn":24},{"ruleId":"109","severity":1,"message":"131","line":25,"column":12,"nodeType":"111","messageId":"112","endLine":25,"endColumn":22},{"ruleId":"109","severity":1,"message":"132","line":25,"column":24,"nodeType":"111","messageId":"112","endLine":25,"endColumn":37},{"ruleId":"109","severity":1,"message":"133","line":27,"column":12,"nodeType":"111","messageId":"112","endLine":27,"endColumn":22},{"ruleId":"109","severity":1,"message":"134","line":30,"column":12,"nodeType":"111","messageId":"112","endLine":30,"endColumn":19},{"ruleId":"109","severity":1,"message":"135","line":30,"column":21,"nodeType":"111","messageId":"112","endLine":30,"endColumn":31},{"ruleId":"109","severity":1,"message":"136","line":76,"column":11,"nodeType":"111","messageId":"112","endLine":76,"endColumn":29},{"ruleId":"109","severity":1,"message":"137","line":80,"column":11,"nodeType":"111","messageId":"112","endLine":80,"endColumn":24},{"ruleId":"109","severity":1,"message":"138","line":88,"column":11,"nodeType":"111","messageId":"112","endLine":88,"endColumn":30},{"ruleId":"109","severity":1,"message":"139","line":92,"column":11,"nodeType":"111","messageId":"112","endLine":92,"endColumn":25},{"ruleId":"109","severity":1,"message":"140","line":99,"column":11,"nodeType":"111","messageId":"112","endLine":99,"endColumn":20},"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'item' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'conversionData'. Either include it or remove the dependency array.","ArrayExpression",["141"],"'setJsonType' is assigned a value but never used.","'xmlType' is assigned a value but never used.","'setXmlType' is assigned a value but never used.","'csvFile' is assigned a value but never used.","'csvFileName' is assigned a value but never used.","'jsonFile' is assigned a value but never used.","'jsonFileName' is assigned a value but never used.","'xmlHeaders' is assigned a value but never used.","'setxmlHeaders' is assigned a value but never used.","'isUploaded' is assigned a value but never used.","'mapName' is assigned a value but never used.","'setMapName' is assigned a value but never used.","'handleDrageOverCsv' is assigned a value but never used.","'handleDropCsv' is assigned a value but never used.","'handleDrageOverJson' is assigned a value but never used.","'handleDropJson' is assigned a value but never used.","'handleNew' is assigned a value but never used.",{"desc":"142","fix":"143"},"Update the dependencies array to be: [conversionData]",{"range":"144","text":"145"},[1032,1034],"[conversionData]"]