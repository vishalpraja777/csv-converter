[{"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\index.js":"1","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\App.js":"2","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\CreateJsonMap.js":"3","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\Profile.js":"4","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\CreateXmlMap.js":"5","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\About.js":"6","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\contact.js":"7","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\UseMap.js":"8","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\HomePage.js":"9","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\MainPage.js":"10","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\Signup.js":"11","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\Login.js":"12","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\EditMapping.js":"13","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\ConvertedFiles.js":"14","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\Navbar.js":"15"},{"size":482,"mtime":1685449547784,"results":"16","hashOfConfig":"17"},{"size":1535,"mtime":1685449547767,"results":"18","hashOfConfig":"17"},{"size":11737,"mtime":1685474665801,"results":"19","hashOfConfig":"17"},{"size":1908,"mtime":1685474691109,"results":"20","hashOfConfig":"17"},{"size":11447,"mtime":1685474669092,"results":"21","hashOfConfig":"17"},{"size":3022,"mtime":1685474659504,"results":"22","hashOfConfig":"17"},{"size":2800,"mtime":1685474662411,"results":"23","hashOfConfig":"17"},{"size":13647,"mtime":1685477420995,"results":"24","hashOfConfig":"17"},{"size":2746,"mtime":1685449547785,"results":"25","hashOfConfig":"17"},{"size":2406,"mtime":1685449547786,"results":"26","hashOfConfig":"17"},{"size":2689,"mtime":1685449547787,"results":"27","hashOfConfig":"17"},{"size":1943,"mtime":1685449547786,"results":"28","hashOfConfig":"17"},{"size":8496,"mtime":1685462575281,"results":"29","hashOfConfig":"17"},{"size":5098,"mtime":1685508857213,"results":"30","hashOfConfig":"17"},{"size":1838,"mtime":1685449547770,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"f3smn0",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"35"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\index.js",[],[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\App.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\CreateJsonMap.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\Profile.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\CreateXmlMap.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\About.js",["81","82"],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\contact.js",["83","84"],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\UseMap.js",["85","86"],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\HomePage.js",["87","88"],[],"import React from \"react\"\r\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport './main.css';\r\nimport bg from './images/bg.webp'\r\n\r\nconst HomePage = () => {\r\n\r\n    const userToken = localStorage.getItem('token')\r\n    console.log(\"Token: \" + userToken)\r\n\r\n    if (userToken) {\r\n        const userDecode = jwtDecode(userToken)\r\n        console.log(userDecode)\r\n    }\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleUseMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/usemap')\r\n    }\r\n\r\n    const handleCreateJsonMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/createjsonmap')\r\n    }\r\n\r\n    const handleCreateXmlMap = (e) => {\r\n        e.preventDefault()\r\n        if (!userToken) {\r\n            alert('Login To Use')\r\n            return\r\n        }\r\n        navigate('/createxmlmap')\r\n    }\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            <Navbar />\r\n\r\n            <div className=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\"\r\n                style={{ backgroundImage: `url(${bg})` }}>\r\n                <div class=\"h-full  w-full text-6xl  text-gray-900 font-serif pt-20 px-20\">\r\n                    <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n                    <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p></div>\r\n\r\n                <div class=\"  ml-96 pt-4 px-24 flex w-3/4 align-middle\" >\r\n                    <div className=\"homeChild\">\r\n                        <h2 class=\" font-bold text-2xl italic\">Use Existing Mapping</h2>\r\n                        <button onClick={handleUseMap} className='btnU'>Upload Files</button>\r\n                        {/* <Link to='/usemap' className='btnU'>Upload Files</Link> */}\r\n                    </div>\r\n                    <div className=\"homeChild\">\r\n                        <h2 class=\" font-bold text-2xl italic\">Create New Mapping</h2>\r\n                        <div className=\"btnDiv\">\r\n                            <button onClick={handleCreateJsonMap} className='btnUD'>Create JSON Map</button>\r\n                            <button onClick={handleCreateXmlMap} className='btnUD'>Create XML Map</button>\r\n                            {/* <Link to='/createmap' className='btnU'>Upload Files</Link> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"py-2\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\MainPage.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\Signup.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\Login.js",[],[],"C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\EditMapping.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],[],"import Navbar from \"../components/Navbar\";\r\nimport { useState, useEffect } from \"react\";\r\nimport './main.css';\r\nimport bg from './images/bg.webp'\r\n\r\n\r\nconst EditMapping = () => {\r\n\r\n    const [mapData, setMapData] = useState()\r\n    const [itemMapData, setItemMapData] = useState()\r\n\r\n    const [tableView, setTableView] = useState(true)\r\n    const [editView, setEditView] = useState(false)\r\n\r\n    const [jsonType, setJsonType] = useState(true)\r\n    const [xmlType, setXmlType] = useState(false)\r\n\r\n    const [csvFile, setCsvFile] = useState('')\r\n    const [csvFileName, setCsvFileName] = useState('')\r\n\r\n    // JSON Fields\r\n    const [jsonFile, setJsonFile] = useState('')\r\n    const [jsonFileName, setJsonFileName] = useState('')\r\n\r\n    const [csvHeaders, setCsvHeaders] = useState([]);\r\n    const [jsonHeaders, setJsonHeaders] = useState([]);\r\n    const [xmlHeaders, setxmlHeaders] = useState([]);\r\n\r\n    const [isUploaded, setIsUploaded] = useState(false);\r\n\r\n    const [mappings, setMappings] = useState(new Map());\r\n    const [mapName, setMapName] = useState('');\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('userid'))\r\n        fetch(`http://localhost:1337/api/getmapdata/${localStorage.getItem('userid')}`)\r\n            .then((response) => {\r\n                const reader = response.body.getReader();\r\n                console.log(reader)\r\n                reader.read().then(({ done, value }) => {\r\n                    if (done) {\r\n                        console.log('end...')\r\n                        return;\r\n                    }\r\n                    const decoder = new TextDecoder();\r\n                    const strData = decoder.decode(value)\r\n                    const jsonData = JSON.parse(strData)\r\n                    console.log(jsonData)\r\n                    setMapData(jsonData)\r\n                });\r\n            })\r\n    }, [])\r\n\r\n    const handleEdit = (e, item) => {\r\n        console.log(item)\r\n        setItemMapData(item)\r\n        setTableView(false)\r\n        setEditView(true)\r\n\r\n        // if (item.mappingtype === 'json') {\r\n        //     setJsonType(true)\r\n        //     setXmlType(false)\r\n        //     setJsonHeaders()\r\n        // } else if (item.mappingtype === 'xml') {\r\n        //     setXmlType(true)\r\n        //     setJsonType(false)\r\n        //     setJsonHeaders()\r\n        // }\r\n\r\n        setJsonHeaders(item.jsonxmlheaders)\r\n\r\n        setCsvHeaders(item.csvheaders)\r\n        const mappings = new Map(Object.entries(item.mappingdata));\r\n        setMappings(mappings)\r\n    }\r\n\r\n    // CSV drag and drop\r\n    const handleDrageOverCsv = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleDropCsv = (event) => {\r\n        event.preventDefault();\r\n        setCsvFile(event.dataTransfer.files[0])\r\n        setCsvFileName(event.dataTransfer.files[0].name)\r\n        console.log(event.dataTransfer.files[0])\r\n    }\r\n\r\n    // JSON drag and drop\r\n    const handleDrageOverJson = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleDropJson = (event) => {\r\n        event.preventDefault();\r\n        setJsonFile(event.dataTransfer.files[0])\r\n        setJsonFileName(event.dataTransfer.files[0].name)\r\n        console.log(event.dataTransfer.files[0])\r\n    }\r\n\r\n    const handleNew = (event) => {\r\n        event.preventDefault();\r\n        setIsUploaded(false);\r\n        setCsvHeaders([]);\r\n        setJsonHeaders([]);\r\n        setCsvFile('');\r\n        setJsonFile('');\r\n        setCsvFileName('');\r\n        setJsonFileName('');\r\n        setMappings(new Map())\r\n    }\r\n\r\n    const handleDragOverMap = (e) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    const handleDropMap = (e, header) => {\r\n        e.preventDefault()\r\n        const droppedText = e.dataTransfer.getData(\"text\");\r\n\r\n        mappings.set(header, droppedText);\r\n        setMappings(new Map(mappings))\r\n\r\n        console.log(droppedText);\r\n        console.log(header);\r\n        console.log(mappings);\r\n\r\n    }\r\n\r\n    const handleOnDragStart = (e, textData) => {\r\n        e.dataTransfer.setData(\"text\", textData)\r\n    }\r\n\r\n    const saveEdit = async () => {\r\n        console.log('Clicked')\r\n\r\n        const mapping = {}\r\n        for (let [key, value] of mappings) {\r\n            mapping[key] = value;\r\n        }\r\n\r\n        const response = await fetch('http://localhost:1337/api/updatemapping', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: itemMapData._id,\r\n                mappingData: mapping,\r\n            })\r\n        })\r\n        \r\n        const data = await response.json();\r\n\r\n        console.log(data)\r\n\r\n        if(data.status === 'ok') {\r\n            alert('Mapping Updated')\r\n            window.location.reload()\r\n        } else {\r\n            alert(\"Couldn't update mapping\")\r\n        }\r\n        setTableView(true)\r\n        setEditView(false)\r\n\r\n    }\r\n\r\n    const cancelEdit = () => {\r\n        setTableView(true)\r\n        setEditView(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\"\r\n        style={{ backgroundImage: `url(${bg})` }}>\r\n            <Navbar />\r\n            <div class=\"h-full  w-full   text-gray-900 font-serif  px-20\">\r\n                    <p class=\"text-6xl text-gray-900 font-serif pt-28 px-20\"> CSV Conversion</p>\r\n                    <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p>\r\n                    {tableView && <div class = \"py-44\">\r\n                    <table class = \" ml-96  \">\r\n                    <tr class = \"font-bold text-2xl\">\r\n                        <th>Map Name</th>\r\n                        <th>Map Type</th>\r\n                        <th>Edit</th>\r\n                    </tr>\r\n                    {\r\n                        mapData?.map((item) =>\r\n                            <tr class = \"font-semibold text-lg\">\r\n                                <td>{item.mappingname}</td>\r\n                                <td>{item.mappingtype.toUpperCase()}</td>\r\n                                <td><button class=\"  bg-black text-white  font-semibold mr-10 text-lg p-3 rounded-xl ml-2 hover:bg-gray-400 active:bg-slate-200\" onClick={(e) => handleEdit(e, item)}>Edit</button></td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </table>\r\n            </div>}\r\n            </div>\r\n            {editView && <div>\r\n                <div className=\"mappingContent\">\r\n                    {jsonType && <div className=\"jsonContent\">\r\n                        <h1>JSON/XML Headers</h1>\r\n                        {\r\n                            jsonHeaders?.map((header) => (\r\n                                <div>\r\n                                    <div\r\n                                        className=\"dragDiv\"\r\n                                        onDragOver={handleDragOverMap}\r\n                                        onDrop={(e) => { handleDropMap(e, header) }}\r\n                                    >\r\n                                        <div className=\"mapKey borderCommon\">{header}</div>\r\n                                        <div style={{ marginLeft: \"20px\" }}>=&gt;</div>\r\n                                        <div className=\"mapValue borderCommon\">{mappings.get(header)}</div>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>}\r\n                    <div className=\"csvContent\">\r\n                        <h1>CSV Headers</h1>\r\n                        {\r\n                            csvHeaders.map((header) => (\r\n                                <div\r\n                                    className=\"jsonItem1\"\r\n                                    draggable\r\n                                    onDragStart={(e) => { handleOnDragStart(e, header) }}\r\n                                >\r\n                                    <div className=\"jsonItem borderCommon\">{header}</div>\r\n                                    <br />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <button className=\"btnU\" onClick={saveEdit}>Save Edit</button>\r\n                <button className=\"btnU\" onClick={cancelEdit}>Cancel Edit</button>\r\n            </div>}\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default EditMapping;","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\pages\\ConvertedFiles.js",["106"],[],"import { useEffect, useState } from \"react\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport './main.css';\r\nimport bg from './images/bg.webp'\r\n\r\nconst ConvertedFiles = () => {\r\n\r\n    const [conversionData, setConversionData] = useState()\r\n\r\n    useEffect(() => {\r\n        console.log(localStorage.getItem('userid'))\r\n        fetch(`http://localhost:1337/api/getconversiondata/${localStorage.getItem('userid')}`)\r\n            .then((response) => {\r\n                const reader = response.body.getReader();\r\n                console.log(reader)\r\n                reader.read().then(({ done, value }) => {\r\n                    if (done) {\r\n                        console.log('end...')\r\n                        return;\r\n                    }\r\n                    const decoder = new TextDecoder();\r\n                    const strData = decoder.decode(value)\r\n                    const jsonData = JSON.parse(strData)\r\n                    console.log(jsonData)\r\n                    setConversionData(jsonData)\r\n                });\r\n            })\r\n        console.log(conversionData)\r\n    }, [])\r\n\r\n    const handleDownload = async (e, filename, type) => {\r\n        e.preventDefault()\r\n\r\n        const response = await fetch('http://localhost:1337/api/downloadfile', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                filename: filename,\r\n                type: type\r\n            })\r\n        })\r\n\r\n        // const data = await response.json();\r\n\r\n        if ( type === 'json') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download ='output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        } else if( type === 'csv') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        } else if( type === 'xml') {\r\n            response.blob().then(blob => {\r\n                let url = window.URL.createObjectURL(blob);\r\n                let a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = 'output_' + filename.slice(14);\r\n                a.click();\r\n            });\r\n        }\r\n        else{\r\n            alert('File not downloaded')\r\n        }\r\n\r\n        // if (data.status === 'ok') {\r\n        //     console.log(data.status)\r\n        // } else {\r\n        //     console.log(data.error)\r\n        // }\r\n\r\n        // console.log(data)\r\n        console.log(filename)\r\n        console.log(type)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <div class=\"w-full h-1/4 bg-no-repeat bg-cover bg-center bg-fixed\" \r\n             style={{ backgroundImage: `url(${bg})` }}>\r\n            <div class=\"h-full  w-full pt-20 px-20\"> \r\n                    <p class=\"text-6xl text-gray-900 font-serif pt-10 px-20\"> CSV Conversion</p>\r\n                    <p class=\"px-36 text-6xl text-gray-900 font-serif \"> Tool</p>\r\n                <table class = \" ml-96 mt-12 \">\r\n                    <tr class = \"font-bold text-2xl\">\r\n                        <th>Conversion Name</th>\r\n                        <th>Mapping Name</th>\r\n                        <th>Mapping Type</th>\r\n                        <th>CSV File</th>\r\n                        <th>JSON/XML File</th>\r\n                    </tr>\r\n                    {\r\n                        conversionData?.map((item) =>\r\n                            <tr class = \"text-lg font-semibold\"> \r\n                                <td>{item.conversionname}</td>\r\n                                <td>{item.mappingname}</td>\r\n                                <td>{item.mappingtype.toUpperCase()}</td>\r\n                                <td>{item.csvfile.slice(14)} <button class=\"  bg-black text-white  m-2  font-medium   p-2 rounded-3xl hover:bg-gray-800 active:bg-slate-200\"  onClick={(e) => handleDownload(e, item.csvfile, 'csv')}>Download</button></td>\r\n                                {item.jsonfile && <td>{item.jsonfile.slice(14)} <button class=\"  bg-black m-2 text-white    font-medium   p-2 rounded-3xl hover:bg-gray-800 active:bg-slate-200\" onClick={(e) => handleDownload(e, item.jsonfile, 'json')}>Download</button></td> }\r\n                                {item.xmlfile && <td>{item.xmlfile.slice(14)} <button class=\"  bg-black m-2 text-white    font-medium   p-2 rounded-3xl hover:bg-gray-800 active:bg-slate-200\"  onClick={(e) => handleDownload(e, item.xmlfile, 'xml')}>Download</button></td> }\r\n                            </tr>\r\n                        )\r\n                    }\r\n                </table>\r\n                <p class = \"py-40\"></p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConvertedFiles;","C:\\Users\\bansa\\OneDrive\\Desktop\\ProjectInternship\\csv-converter-1\\frontend\\src\\components\\Navbar.js",[],[],{"ruleId":"107","severity":1,"message":"108","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":20},{"ruleId":"107","severity":1,"message":"111","line":2,"column":22,"nodeType":"109","messageId":"110","endLine":2,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":20},{"ruleId":"107","severity":1,"message":"111","line":2,"column":22,"nodeType":"109","messageId":"110","endLine":2,"endColumn":33},{"ruleId":"107","severity":1,"message":"112","line":31,"column":12,"nodeType":"109","messageId":"110","endLine":31,"endColumn":16},{"ruleId":"113","severity":1,"message":"114","line":255,"column":28,"nodeType":"115","messageId":"116","endLine":255,"endColumn":30},{"ruleId":"107","severity":1,"message":"108","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":21},{"ruleId":"107","severity":1,"message":"117","line":2,"column":36,"nodeType":"109","messageId":"110","endLine":2,"endColumn":40},{"ruleId":"107","severity":1,"message":"118","line":15,"column":22,"nodeType":"109","messageId":"110","endLine":15,"endColumn":33},{"ruleId":"107","severity":1,"message":"119","line":16,"column":12,"nodeType":"109","messageId":"110","endLine":16,"endColumn":19},{"ruleId":"107","severity":1,"message":"120","line":16,"column":21,"nodeType":"109","messageId":"110","endLine":16,"endColumn":31},{"ruleId":"107","severity":1,"message":"121","line":18,"column":12,"nodeType":"109","messageId":"110","endLine":18,"endColumn":19},{"ruleId":"107","severity":1,"message":"122","line":19,"column":12,"nodeType":"109","messageId":"110","endLine":19,"endColumn":23},{"ruleId":"107","severity":1,"message":"123","line":22,"column":12,"nodeType":"109","messageId":"110","endLine":22,"endColumn":20},{"ruleId":"107","severity":1,"message":"124","line":23,"column":12,"nodeType":"109","messageId":"110","endLine":23,"endColumn":24},{"ruleId":"107","severity":1,"message":"125","line":27,"column":12,"nodeType":"109","messageId":"110","endLine":27,"endColumn":22},{"ruleId":"107","severity":1,"message":"126","line":27,"column":24,"nodeType":"109","messageId":"110","endLine":27,"endColumn":37},{"ruleId":"107","severity":1,"message":"127","line":29,"column":12,"nodeType":"109","messageId":"110","endLine":29,"endColumn":22},{"ruleId":"107","severity":1,"message":"128","line":32,"column":12,"nodeType":"109","messageId":"110","endLine":32,"endColumn":19},{"ruleId":"107","severity":1,"message":"129","line":32,"column":21,"nodeType":"109","messageId":"110","endLine":32,"endColumn":31},{"ruleId":"107","severity":1,"message":"130","line":78,"column":11,"nodeType":"109","messageId":"110","endLine":78,"endColumn":29},{"ruleId":"107","severity":1,"message":"131","line":82,"column":11,"nodeType":"109","messageId":"110","endLine":82,"endColumn":24},{"ruleId":"107","severity":1,"message":"132","line":90,"column":11,"nodeType":"109","messageId":"110","endLine":90,"endColumn":30},{"ruleId":"107","severity":1,"message":"133","line":94,"column":11,"nodeType":"109","messageId":"110","endLine":94,"endColumn":25},{"ruleId":"107","severity":1,"message":"134","line":101,"column":11,"nodeType":"109","messageId":"110","endLine":101,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":29,"column":8,"nodeType":"137","endLine":29,"endColumn":10,"suggestions":"138"},"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'item' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'setJsonType' is assigned a value but never used.","'xmlType' is assigned a value but never used.","'setXmlType' is assigned a value but never used.","'csvFile' is assigned a value but never used.","'csvFileName' is assigned a value but never used.","'jsonFile' is assigned a value but never used.","'jsonFileName' is assigned a value but never used.","'xmlHeaders' is assigned a value but never used.","'setxmlHeaders' is assigned a value but never used.","'isUploaded' is assigned a value but never used.","'mapName' is assigned a value but never used.","'setMapName' is assigned a value but never used.","'handleDrageOverCsv' is assigned a value but never used.","'handleDropCsv' is assigned a value but never used.","'handleDrageOverJson' is assigned a value but never used.","'handleDropJson' is assigned a value but never used.","'handleNew' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'conversionData'. Either include it or remove the dependency array.","ArrayExpression",["139"],{"desc":"140","fix":"141"},"Update the dependencies array to be: [conversionData]",{"range":"142","text":"143"},[1089,1091],"[conversionData]"]